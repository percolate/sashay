---
  approval_group_id:
    type: string
    pattern: ^approval_group_id:\d+$
    example: approval_group:1
    description: |
      Creates an approval workflow for this post. If the post is already part of an approval workflow, this will overwrite it. (see [approvals](#approvals) for details)
  channel_id:
    type: string
    pattern: ^channel:\d+$
    example: channel:59321234055693
    description: |
      The channel to which this post has been or will be published.
  copy_from_id:
    type: string
    pattern: ^post:\d+$
    description: |
      When `copy_from_id` is specified all CU fields become optional overrides of the original data.

      - only works with the same `channel_id` or another `channel_id` with the same type
      - only works if user has the ability to `post:create` in the target scope
      - copies all `asset_ids` to the primary library in the target scope and updates new post attributes with new asset IDs
      - `term_ids` are added to the new post only if found by name in the target scope
      - `topic_ids` are carried over on the same scope only
      - Plugs are copied over (specifically `plug.budget`, `plug.start_at`, `plug.end_at`)
      - `live_at`, `url`, `approval_workflow_id`, `ingested` are set to `null`
      - sets `created_at` and `updated_at` to now
      - `origin_ids` are carried over on the same scope (ex. post created from a brief or another post)
      - sets `status` to `draft` unless specified
      - links are re-shortened for new scope
      - replaces original `user_id` with the current `user_id`
      - activity will be the same as creating a new post
      - comments/Followers do not carry over

      V4 concepts:

      - Targeting does not carry over
      - Guardrail only carries over on same scope
      - Analytics does not carry over

      Below is an example of copying a post to a different scope, channel, change the name, and immediately queue it using [POST /api/v5/post/](#).

      ```json
      {
          "copy_from_id": "post:1",
          "channel_id": "channel:2",
          "name": "This is my new post",
          "scope_id": "license:2",
          "status": "queued"
      }
      ```
  description:
    type: string
    example: I created this post because...
    description: |
      A short description about the post
  ext:
    type: object
    example: {}
    description: |
      The structure defined by `schema_id`.
  live_at:
    type: string
    format: dateTime
    example: 2014-06-10T00:00:00+00:00
    description: |
      When this post should/did go live. If `null` and status is live, `live_at` will be the current time. In all other cases `null` indicates that the post should go live ASAP. Note: regardless of whether a post is published or not, `live_at` reflects when the post goes live to the public.
  live_at_timezone:
    type: string
    enum:
      - America/New_york
    example: America/New_york
    description: |
      The timezone the post was intended to be scheduled in (usually the device's timezone unless an app specifies otherwise). `live_at` offset isn't enough to know.
  name:
    type: string
    example: This is my post
    description: |
      The name of the post.
  origin_ids:
    type: array
    items:
      type: string
      pattern: ^(brief|brew|waiver|post|share):\d+$
    example: ["brief:1"]
    description: |
      Tracks where the post was created from. Possible options are `brief:*,brew:*,waiver:*,post:*,share:*`
  platform_id:
    type: string
    pattern: ^platform:\d+$
    example: platform:1
    description: |
      Which platform to create a post for (must match the channel's platform)
  schema_id:
    type: string
    pattern: ^schema:\d+$
    example: schema:1
    description: |
      The schema defining the type of post (must be a schema of type post matching the channel)
  scope_id:
    type: string
    pattern: ^(license|brand|partner):\d+$
    example: license:1
    description: |
      Which scope the post belongs to.
  status:
    type: string
    enum:
      - draft
      - approvals.queued
      - approvals.draft
      - queued
      - queued.paused
      - queued.publishing
      - queued.error
      - queued.published
      - live
    example: approvals.queued
    description: |
      Below you'll find all possible statuses during a post's life cycle.

      ### draft

      The post is in a holding pattern.

      ### approvals

      The post is currently part of an approval workflow. A post can be removed from approvals by reverting it back to `draft`. Users with `post:publish` permission may bypass approvals by setting the status to `queued`. Once approved, the post status will either be `queued` or set back to `draft` if the current status is `approvals.queued` or `approvals.draft`.

      ### queued

      The post is queued to be published to the associated channel. Publishing happens only once `scheduled_for` is in the past or `null`. A post is either queued automatically upon approval or manually if a user has the `post:publish` permission. Only a `queued` or `queued.paused` status can be changed by the user (usually back to `draft`).

      - `queued.paused`: the post is queued but publishing is currently paused (the post cannot be published)
      - `queued.publishing`: The post is currently being published
      - `queued.published`: the post is still queued and has been successfully published. This indicates that the post hasn't gone live yet usually because of an external queue or some privacy controls.
      - `queued.error`: there was an error sending the post to the channel

      ### live

      The post is now live to the public on the associated channel. This state is either set automatically after `queued.published` or manually by a user with `post:publish` permission. In order to change the post's status to live `url` and `live_at` are required.
  term_ids:
    type: array
    items:
      type: string
      pattern: ^term:\d+$
    example: term:1
    description: |
      A list of terms.
  topic_ids:
    type: array
    items:
      type: string
      pattern: ^topic:\d+$
    example: topic:1
    description: |
      A list of topics.
