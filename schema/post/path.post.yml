---
  get:
    summary: List posts
    description: |
      Gets the posts.
    tags:
      - post
    parameters:
      -
        in: query
        name: approval_user_ids
        type: array
        items:
          type: string
          pattern: ^user:\d+$
        collectionFormat: csv
        description: |
          Filter by users that are part of approval workflows (pending or complete) attached to a post.
      -
        in: query
        name: asset_ids
        type: array
        items:
          type: string
          pattern: ^asset:\d+$
        collectionFormat: csv
        description: |
          Filters posts by asset.
      -
        in: query
        name: channel_ids
        type: array
        items:
          type: string
          pattern: ^channel:\d+$
        collectionFormat: csv
        description: |
          Filter by channels.
      -
        in: query
        name: exclude_approved_by
        type: array
        items:
          type: string
          pattern: ^user:\d+$
        collectionFormat: csv
        description: |
          Exclude posts that are approved by these user ids.
      -
        in: query
        name: ids
        type: array
        items:
          type: string
          pattern: ^post:\d+$
        collectionFormat: csv
        description: |
          Get posts by ID. If this is specified, no other parameter may be specified.
      -
        in: query
        name: is_interaction
        type: boolean
        description: |
          Filter posts to only those that are or are not interactions with external content. Defaults to being unspecified and including both interactions and non-interactions. :fire: This is provisional/unstable, only for use by Percolate frontend, may be removed in the future! :fire:.
      -
        in: query
        name: link_ids
        type: array
        items:
          type: string
          pattern: ^link:\d+$
        collectionFormat: csv
        description: |
          Filters posts by link.
      -
        in: query
        name: live_at
        type: boolean
        description: |
          Filters posts that are not scheduled to go live.
      -
        in: query
        name: live_at:from
        type: string
        format: dateTime
        description: |
          Filter posts after `live_at` (inclusive).
      -
        in: query
        name: live_at:to
        type: string
        format: dateTime
        description: |
          Filter posts before `live_at` (exclusive).
      -
        in: query
        name: order_by
        type: string
        enum:
          - live_at
          - created_at
        default: live_at
        description: |
          Orders by date.
      -
        in: query
        name: order_direction
        type: string
        enum:
          - asc
          - desc
        default: asc
        description: |
          Sets order direction.
      -
        in: query
        name: origin_ids
        type: array
        items:
          type: string
          pattern: ^brief:\d+$
        collectionFormat: csv
        description: |
          Filter posts by origin.
      -
        in: query
        name: platform_ids
        type: array
        items:
          type: string
          pattern: ^platform:\d+$
        collectionFormat: csv
        description: |
          Filter by platforms.
      -
        in: query
        name: schema_ids
        type: array
        items:
          type: string
          pattern: ^schema:\d+$
        collectionFormat: csv
        description: |
          Filter by schemas.
      -
        in: query
        name: statuses
        type: array
        items:
          type: string
        collectionFormat: csv
        description: |
          Filter by statuses. The wildcard `.*` is supported for operations such as "all queued statuses `queued.*`"
      -
        in: query
        name: scope_ids
        required: true
        type: array
        items:
          type: string
          pattern: ^license:\d+$
        collectionFormat: csv
        description: |
          Filter by scopes.
      -
        in: query
        name: term_ids
        type: array
        items:
          type: string
          pattern: ^term:\d+$
        collectionFormat: csv
        description: |
          Filter by terms.
      -
        in: query
        name: topic_ids
        type: array
        items:
          type: string
          pattern: ^topic:\d+$
        collectionFormat: csv
        description: |
          Filter by topics.
      -
        in: query
        name: user_ids
        type: array
        items:
          type: string
          pattern: ^user:\d+$
        collectionFormat: csv
        description: |
          Filter by users.
    responses:
      200:
        $ref: responses.yml#/posts/200
  post:
    summary: Create a post
    description: |
      Creates a Post.

      If `copy_from_id` is passed, does a copy as per copy. Otherwise creates a new post. Validation of ext data is performed as per schema.
    tags:
      - post
    parameters:
      -
        name: body
        in: body
        required: true
        schema:
          type: object
          required:
            - channel_id
            - ext
            - name
            - platform_id
            - schema_id
            - scope_id
            - status
          properties:
            approval_group_id:
              $ref: properties.yml#/approval_group_id
            channel_id:
              $ref: properties.yml#/channel_id
            copy_from_id:
              $ref: properties.yml#/copy_from_id
            description:
              $ref: properties.yml#/description
            ext:
              $ref: properties.yml#/ext
            live_at:
              $ref: properties.yml#/live_at
            live_at_timezone:
              $ref: properties.yml#/live_at_timezone
            name:
              $ref: properties.yml#/name
            origin_ids:
              $ref: properties.yml#/origin_ids
            platform_id:
              $ref: properties.yml#/platform_id
            schema_id:
              $ref: properties.yml#/schema_id
            scope_id:
              $ref: properties.yml#/scope_id
            status:
              $ref: properties.yml#/status
            term_ids:
              $ref: properties.yml#/term_ids
            topic_ids:
              $ref: properties.yml#/topic_ids
    responses:
      200:
        $ref: responses.yml#/post/200
